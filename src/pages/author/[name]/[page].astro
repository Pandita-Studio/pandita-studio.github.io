---
import type { GetStaticPaths, Page } from "astro";

import Main from "@layouts/Main.astro";
import Navbar from "@components/Navbar.astro";
import Footer from "@components/Footer.astro";
import PostPreview from "@components/blog/PostPreview.astro";

import { getCollection } from "astro:content";
import type { InferEntrySchema, CollectionEntry } from "astro:content";

export const getStaticPaths: GetStaticPaths = async ({ paginate }) => {
	let authors = await getCollection("authors");

	let paths: { params: { name: string },  props: any }[] = [];

	for (const author of authors) {
		const authorPosts = (await getCollection("blog"))
			.filter((post) => post.data.author.id == author.id)
			.sort(
				(a, b) =>
					b.data.publishDate.getTime() - a.data.publishDate.getTime(),
			);

		const pages = paginate(authorPosts, {
			pageSize: 3,
			params: { name: author.id },
			props: {
				author: author.data,
			},
		});

		paths.push(...pages);
	}

	return paths;
};

const { page } = Astro.props as { page: Page<CollectionEntry<"blog">> };
const { author } = Astro.props as { author: InferEntrySchema<"authors">; };
---

<Main>
	<Navbar />

	<div class="w-full min-h-screen mt-24 lg:mt-20">
		<div class="w-full flex items-start justify-center">
			<div class="w-full p-6 max-w-4xl">
				<!-- Breadcrumbs -->
				<nav aria-label="Breadcrumb" class="text-sm text-gray-600 mb-4">
					<a class="hover:underline" href="/#home">Home</a>
					<span class="mx-2">/</span>
					<a class="hover:underline" href="/blog/1">Blog</a>
					<span class="mx-2">/</span>
					<a class="hover:underline" href="/author">Authors</a>
					<span class="mx-2">/</span>
					<span class="font-medium">{author.name}</span>
				</nav>
				<!-- Header -->
				<header
					class="w-full my-6 flex flex-col lg:flex-row lg:items-center lg:justify-between gap-6"
				>
					<div class="flex items-center gap-4">
						<!-- Optional avatar if present -->
						{
							author.picture ? (
								<img
									src={author.picture}
									alt={`${author.name} avatar`}
									class="w-24 h-24 rounded-full object-cover flex-shrink-0"
								/>
							) : (
								<div class="w-24 h-24 rounded-full bg-gray-100 flex items-center justify-center text-gray-500 text-lg">
									{author.name?.slice(0, 1)}
								</div>
							)
						}

						<div>
							<h1
								class="orbitron-regular tracking-widest text-3xl lg:text-4xl"
							>
								{author.name}
							</h1>
							{
								author.bio && (
									<p class="mt-2 text-gray-500 max-w-prose">
										{author.bio}
									</p>
								)
							}

							<div
								class="mt-3 flex flex-col sm:flex-row sm:items-center gap-3 text-sm text-gray-500"
							>
								{
									author.email && (
										<a
											class="hover:text-pink-500 transition-colors duration-300"
											href={`mailto:${author.email}`}
										>
											{author.email}
										</a>
									)
								}
								{
									author.website && (
										<a
											class="hover:text-pink-500 transition-colors duration-300"
											href={
												author.website.startsWith(
													"http",
												)
													? author.website
													: `https://${author.website}`
											}
											target="_blank"
											rel="noopener noreferrer"
										>
											{author.website
												.replace(/^https?:\/\//, "")
												.replace(/\/$/, "")}
										</a>
									)
								}
							</div>
						</div>
					</div>

					<div class="flex items-center gap-4">
						<div class="text-sm text-gray-400">Latest posts</div>
						<hr
							class="h-8 border-l border-gray-200 mx-2 hidden lg:block"
						/>
						<div class="text-sm text-gray-500">
							{page.total} posts
						</div>
					</div>
				</header>

				<hr class="border-gray-200 mb-6" />

				<section class="w-full flex flex-col gap-6">
					{
						page.data.map((post: any) => {
							return (
								<article class="w-full max-w-4xl">
									<PostPreview postSlug={post.slug} />
								</article>
							);
						})
					}
				</section>

				<nav
					class="flex flex-wrap items-center gap-2 mt-6"
					aria-label="Pagination"
				>
					{
						() => {
							if (page.currentPage != 1) {
								return (
									<a
										href={`/author/${author.name}/1`}
										class="px-3 py-1 rounded border transition-colors duration-200 bg-white text-gray-600 border-gray-300 hover:bg-gray-100"
									>
										First
									</a>
								);
							}
						}
					}

					{
						() => {
							if (page.url.prev)
								return (
									<a
										href={page.url.prev}
										class="px-3 py-1 rounded border transition-colors duration-200 bg-white text-gray-600 border-gray-300 hover:bg-gray-100"
									>
										Previous
									</a>
								);
						}
					}

					{
						(() => {
							const buttons = [];
							const start = Math.max(1, page.currentPage - 1);
							const end =
								Math.min(page.lastPage, page.currentPage + 3) +
								1;

							for (let i = start; i < end; i++) {
								const href = `/author/${author.name}/${i}`;
								const isActive = i === page.currentPage;

								buttons.push(
									<a
										href={href}
										class={`px-3 py-1 rounded border transition-colors duration-200 ${
											isActive
												? "bg-pink-500 text-white border-pink-500"
												: "bg-white text-gray-600 border-gray-300 hover:bg-gray-100"
										}`}
									>
										{i}
									</a>,
								);
							}

							return buttons;
						})()
					}

					{
						() => {
							if (page.url.next)
								return (
									<a
										href={page.url.next}
										class="px-3 py-1 rounded border transition-colors duration-200 bg-white text-gray-600 border-gray-300 hover:bg-gray-100"
									>
										Next
									</a>
								);
						}
					}

					{
						() => {
							if (page.lastPage > 3) {
								return (
									<a
										href={`/author/${author.name}/${page.lastPage}`}
										class="px-3 py-1 rounded border transition-colors duration-200 bg-white text-gray-600 border-gray-300 hover:bg-gray-100"
									>
										Last
									</a>
								);
							}
						}
					}
				</nav>

				<div class="text-gray-400 mt-3 text-sm">
					<i
						>Page {page.currentPage} of {page.lastPage} - viewing {
							page.size
						} of {page.total} posts.</i
					>
				</div>

				<hr class="border-gray-200 mt-6" />
			</div>
		</div>
	</div>

	<Footer />
</Main>
