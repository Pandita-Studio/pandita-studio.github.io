---
import type { GetStaticPaths, Page } from "astro";

import Main from "@layouts/Main.astro";
import Navbar from "@components/Navbar.astro";
import Footer from "@components/Footer.astro";
import PostPreview from "@components/blog/PostPreview.astro";

import { getCollection, type CollectionEntry } from "astro:content";

export const getStaticPaths: GetStaticPaths = async ({ paginate }) => {
	let posts = (await getCollection("blog")).sort(
		(a, b) => b.data.publishDate.getTime() - a.data.publishDate.getTime(),
	);

	return paginate(posts, { pageSize: 2 });
};

const { page } = Astro.props as { page: Page<CollectionEntry<"blog">> };
---

<Main title="Pandita | Blog">
	<Navbar />

	<div class="w-full min-h-screen mt-40 lg:mt-30">
		<div class="w-full flex items-center justify-center">
			<div class="w-full p-4 max-w-6xl">
				<div class="w-full lg:flex flex-col gap-4">
					<div
						class="mb-5 orbitron-regular tracking-widest text-3xl lg:text-4xl text-center lg:text-left [text-shadow:_3px_3px_0px_rgba(5,213,255,0.5)]"
					>
						BLOG
					</div>

					<hr class="border-gray-200">

					{
						page.data.map((post) => {
							return <PostPreview postSlug={post.slug} />;
						})
					}

					<div class="flex justify-start gap-2 mt-5">
						{
							() => {
								if (page.currentPage != 1) {
									return (
										<a
											href="/blog/1"
											class="px-3 py-1 rounded border hover:border-pink-500 transition-colors duration-300 bg-white text-gray-600 border-gray-300 hover:bg-gray-100"
										>
											first
										</a>
									);
								}
							}
						}

						{
							() => {
								if (page.url.prev)
									return (
										<a
											href={page.url.prev}
											class="px-3 py-1 rounded border hover:border-pink-500 transition-colors duration-300 bg-white text-gray-600 border-gray-300 hover:bg-gray-100"
										>
											←
										</a>
									);
							}
						}

						{
							(() => {
								const buttons = [];
								const start = Math.max(1, page.currentPage - 1);
								const end =
									Math.min(
										page.lastPage,
										page.currentPage + 3,
									) + 1;

								for (let i = start; i < end; i++) {
									const href = `/blog/${i}/`;
									const isActive = i === page.currentPage;

									buttons.push(
										<a
											href={href}
											class={`px-3 py-1 rounded border hover:border-pink-500 transition-colors duration-300 ${
												isActive
													? "bg-pink-500 text-white border-pink-500"
													: "bg-white text-gray-600 border-gray-300 hover:bg-gray-100"
											}`}
										>
											{i}
										</a>,
									);
								}

								return buttons;
							})()
						}

						{
							() => {
								if (page.url.next)
									return (
										<a
											href={page.url.next}
											class="px-3 py-1 rounded border hover:border-pink-500 transition-colors duration-300 bg-white text-gray-600 border-gray-300 hover:bg-gray-100"
										>
											→
										</a>
									);
							}
						}

						{
							() => {
								if (page.lastPage > 3) {
									return (
										<a
											href={`/blog/${page.lastPage}`}
											class="px-3 py-1 rounded border hover:border-pink-500 transition-colors duration-300 bg-white text-gray-600 border-gray-300 hover:bg-gray-100"
										>
											last
										</a>
									);
								}
							}
						}
					</div>

					<div class="text-gray-400">
						<i
							>Page {page.currentPage} of {page.lastPage} - viewing
							{page.size} of {page.total} posts.</i
						>
					</div>

					<hr class="border-gray-200">
				</div>
			</div>
		</div>
	</div>

	<Footer />
</Main>
